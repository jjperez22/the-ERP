// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String   @id @default(cuid())
  sku             String   @unique
  name            String
  description     String?
  category        String
  subcategory     String?
  brand           String?
  model           String?
  price           Float
  cost            Float
  stock           Int
  reservedStock   Int      @default(0)
  availableStock  Int      @default(0)
  reorderPoint    Int
  reorderQuantity Int      @default(0)
  maxStock        Int?
  minStock        Int?
  unit            String   @default("pcs")
  weight          Float?
  dimensions      String?
  location        String?
  barcode         String?
  isActive        Boolean  @default(true)
  isTracked       Boolean  @default(true)
  tags            String[] @default([])
  notes           String?
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  customFields    Json?    // For flexible custom attributes
  images          String[] @default([])
  documents       String[] @default([])
  lastAuditDate   DateTime?
  lastCountDate   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  updatedBy       String?

  // Relations
  transactions    InventoryTransaction[]
  orderItems      OrderItem[]

  // Performance indexes
  @@index([category, isActive], name: "idx_product_category_active")
  @@index([stock, reorderPoint], name: "idx_product_stock_levels")
  @@index([supplierId], name: "idx_product_supplier")
  @@index([createdAt], name: "idx_product_created")
  @@index([name], name: "idx_product_name")
  @@map("products")
}

model Supplier {
  id       String    @id @default(cuid())
  name     String
  code     String    @unique
  email    String?
  phone    String?
  address  String?
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suppliers")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name], name: "idx_customer_name")
  @@index([createdAt], name: "idx_customer_created")
  @@map("customers")
}

model Order {
  id         String      @id @default(cuid())
  orderNumber String     @unique
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id])
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  totalAmount Float
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([customerId], name: "idx_order_customer")
  @@index([status], name: "idx_order_status")
  @@index([createdAt], name: "idx_order_created")
  @@index([status, createdAt], name: "idx_order_status_date")
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  totalPrice Float

  @@map("order_items")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  customerId  String
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  budget      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

model InventoryTransaction {
  id        String      @id @default(cuid())
  productId String
  product   Product     @relation(fields: [productId], references: [id])
  type      TransactionType
  quantity  Int
  reason    String?
  createdAt DateTime    @default(now())
  createdBy String

  @@map("inventory_transactions")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
}
